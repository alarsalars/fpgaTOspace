-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_func is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_r : IN STD_LOGIC;
    out_r : OUT STD_LOGIC;
    compare : OUT STD_LOGIC );
end;


architecture behav of main_func is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "main_func_main_func,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.287000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=17,HLS_SYN_LUT=6,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";

    signal out_func1_first_func_fu_58_ap_start : STD_LOGIC;
    signal out_func1_first_func_fu_58_ap_done : STD_LOGIC;
    signal out_func1_first_func_fu_58_ap_idle : STD_LOGIC;
    signal out_func1_first_func_fu_58_ap_ready : STD_LOGIC;
    signal out_func1_first_func_fu_58_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_second_func_fu_65_ap_start : STD_LOGIC;
    signal call_ret_second_func_fu_65_ap_done : STD_LOGIC;
    signal call_ret_second_func_fu_65_ap_idle : STD_LOGIC;
    signal call_ret_second_func_fu_65_ap_ready : STD_LOGIC;
    signal call_ret_second_func_fu_65_ap_return_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret_second_func_fu_65_ap_return_1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_func_first_func IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component main_func_second_func IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        loop_bit : IN STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    out_func1_first_func_fu_58 : component main_func_first_func
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => out_func1_first_func_fu_58_ap_start,
        ap_done => out_func1_first_func_fu_58_ap_done,
        ap_idle => out_func1_first_func_fu_58_ap_idle,
        ap_ready => out_func1_first_func_fu_58_ap_ready,
        ap_return => out_func1_first_func_fu_58_ap_return);

    call_ret_second_func_fu_65 : component main_func_second_func
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret_second_func_fu_65_ap_start,
        ap_done => call_ret_second_func_fu_65_ap_done,
        ap_idle => call_ret_second_func_fu_65_ap_idle,
        ap_ready => call_ret_second_func_fu_65_ap_ready,
        loop_bit => in_r,
        ap_return_0 => call_ret_second_func_fu_65_ap_return_0,
        ap_return_1 => call_ret_second_func_fu_65_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    call_ret_second_func_fu_65_ap_start_assign_proc : process(ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            call_ret_second_func_fu_65_ap_start <= ap_const_logic_1;
        else 
            call_ret_second_func_fu_65_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    compare <= (call_ret_second_func_fu_65_ap_return_1(0) xor call_ret_second_func_fu_65_ap_return_0(0));

    out_func1_first_func_fu_58_ap_start_assign_proc : process(ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            out_func1_first_func_fu_58_ap_start <= ap_const_logic_1;
        else 
            out_func1_first_func_fu_58_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    out_r <= out_func1_first_func_fu_58_ap_return(0);
end behav;
