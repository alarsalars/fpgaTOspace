// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="main_func_main_func,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.287000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=17,HLS_SYN_LUT=6,HLS_VERSION=2022_2}" *)

module main_func (
        ap_clk,
        ap_rst,
        in_r,
        out_r,
        compare
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   in_r;
output   out_r;
output   compare;

reg    out_func1_first_func_fu_58_ap_start;
wire    out_func1_first_func_fu_58_ap_done;
wire    out_func1_first_func_fu_58_ap_idle;
wire    out_func1_first_func_fu_58_ap_ready;
wire   [0:0] out_func1_first_func_fu_58_ap_return;
reg    call_ret_second_func_fu_65_ap_start;
wire    call_ret_second_func_fu_65_ap_done;
wire    call_ret_second_func_fu_65_ap_idle;
wire    call_ret_second_func_fu_65_ap_ready;
wire   [0:0] call_ret_second_func_fu_65_ap_return_0;
wire   [0:0] call_ret_second_func_fu_65_ap_return_1;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

main_func_first_func out_func1_first_func_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(out_func1_first_func_fu_58_ap_start),
    .ap_done(out_func1_first_func_fu_58_ap_done),
    .ap_idle(out_func1_first_func_fu_58_ap_idle),
    .ap_ready(out_func1_first_func_fu_58_ap_ready),
    .ap_return(out_func1_first_func_fu_58_ap_return)
);

main_func_second_func call_ret_second_func_fu_65(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret_second_func_fu_65_ap_start),
    .ap_done(call_ret_second_func_fu_65_ap_done),
    .ap_idle(call_ret_second_func_fu_65_ap_idle),
    .ap_ready(call_ret_second_func_fu_65_ap_ready),
    .loop_bit(in_r),
    .ap_return_0(call_ret_second_func_fu_65_ap_return_0),
    .ap_return_1(call_ret_second_func_fu_65_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        call_ret_second_func_fu_65_ap_start = 1'b1;
    end else begin
        call_ret_second_func_fu_65_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        out_func1_first_func_fu_58_ap_start = 1'b1;
    end else begin
        out_func1_first_func_fu_58_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign compare = (call_ret_second_func_fu_65_ap_return_1 ^ call_ret_second_func_fu_65_ap_return_0);

assign out_r = out_func1_first_func_fu_58_ap_return;

endmodule //main_func
