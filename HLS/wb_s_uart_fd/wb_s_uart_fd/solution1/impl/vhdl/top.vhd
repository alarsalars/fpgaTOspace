-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    adr : IN STD_LOGIC_VECTOR (7 downto 0);
    we : IN STD_LOGIC;
    cyc : IN STD_LOGIC;
    stb : IN STD_LOGIC;
    wb_in : IN STD_LOGIC_VECTOR (7 downto 0);
    rx : IN STD_LOGIC;
    tx : OUT STD_LOGIC;
    ack : OUT STD_LOGIC;
    uart_out : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_top,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.401286,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3,HLS_SYN_LUT=73,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0_1 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0_2 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0_3 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";

    signal state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal next_state_fu_175_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_load_load_fu_117_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal rx_read_read_fu_62_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_1_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_fu_151_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_fu_151_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_1_fu_157_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_fu_163_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_condition_50 : BOOLEAN;
    signal ap_condition_56 : BOOLEAN;
    signal ap_condition_59 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_boolean_1 = ap_condition_59)) then 
                    state <= ap_const_lv2_1;
                elsif ((ap_const_boolean_1 = ap_condition_56)) then 
                    state <= next_state_fu_175_p3;
                elsif ((ap_const_boolean_1 = ap_condition_50)) then 
                    state <= ap_const_lv2_0_3;
                elsif (((rx_read_read_fu_62_p2 = ap_const_lv1_1) and (state_load_load_fu_117_p1 = ap_const_lv2_2))) then 
                    state <= ap_const_lv2_2;
                elsif (((rx_read_read_fu_62_p2 = ap_const_lv1_0) and (state_load_load_fu_117_p1 = ap_const_lv2_2))) then 
                    state <= ap_const_lv2_0_2;
                elsif ((state_load_load_fu_117_p1 = ap_const_lv2_1)) then 
                    state <= ap_const_lv2_0_1;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    ack_assign_proc : process(ap_CS_fsm_state1, state_load_load_fu_117_p1, rx_read_read_fu_62_p2)
    begin
        if ((not((state_load_load_fu_117_p1 = ap_const_lv2_2)) and not((state_load_load_fu_117_p1 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ack <= ap_const_logic_0;
        elsif ((((rx_read_read_fu_62_p2 = ap_const_lv1_0) and (state_load_load_fu_117_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((state_load_load_fu_117_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ack <= ap_const_logic_1;
        else 
            ack <= 'X';
        end if; 
    end process;

    and_ln47_1_fu_157_p1 <= (0=>we, others=>'-');
    and_ln47_1_fu_157_p2 <= (and_ln47_fu_151_p2 and and_ln47_1_fu_157_p1);
    and_ln47_fu_151_p0 <= (0=>stb, others=>'-');
    and_ln47_fu_151_p1 <= (0=>cyc, others=>'-');
    and_ln47_fu_151_p2 <= (and_ln47_fu_151_p1 and and_ln47_fu_151_p0);
    and_ln52_fu_169_p2 <= (xor_ln52_fu_163_p2 and and_ln47_fu_151_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_condition_50_assign_proc : process(state_load_load_fu_117_p1, icmp_ln1019_fu_139_p2)
    begin
                ap_condition_50 <= (not((state_load_load_fu_117_p1 = ap_const_lv2_2)) and not((state_load_load_fu_117_p1 = ap_const_lv2_1)) and (icmp_ln1019_fu_139_p2 = ap_const_lv1_0));
    end process;


    ap_condition_56_assign_proc : process(state_load_load_fu_117_p1, icmp_ln1019_fu_139_p2, and_ln47_1_fu_157_p2)
    begin
                ap_condition_56 <= (not((state_load_load_fu_117_p1 = ap_const_lv2_2)) and not((state_load_load_fu_117_p1 = ap_const_lv2_1)) and (icmp_ln1019_fu_139_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln47_1_fu_157_p2));
    end process;


    ap_condition_59_assign_proc : process(state_load_load_fu_117_p1, icmp_ln1019_fu_139_p2, and_ln47_1_fu_157_p2)
    begin
                ap_condition_59 <= (not((state_load_load_fu_117_p1 = ap_const_lv2_2)) and not((state_load_load_fu_117_p1 = ap_const_lv2_1)) and (icmp_ln1019_fu_139_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln47_1_fu_157_p2));
    end process;

    icmp_ln1019_fu_139_p2 <= "1" when (adr = ap_const_lv8_FC) else "0";
    next_state_fu_175_p3 <= 
        ap_const_lv2_2 when (and_ln52_fu_169_p2(0) = '1') else 
        ap_const_lv2_0;
    rx_read_read_fu_62_p2 <= (0=>rx, others=>'-');
    state_load_load_fu_117_p1 <= state;
    tx <= ap_const_logic_1;
    uart_out <= ap_const_lv8_0;
    xor_ln52_fu_163_p0 <= (0=>we, others=>'-');
    xor_ln52_fu_163_p2 <= (xor_ln52_fu_163_p0 xor ap_const_lv1_1);
end behav;
