// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_top,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.401286,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3,HLS_SYN_LUT=73,HLS_VERSION=2022_2}" *)

module top (
        ap_clk,
        ap_rst,
        adr,
        we,
        cyc,
        stb,
        wb_in,
        rx,
        tx,
        ack,
        uart_out
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [7:0] adr;
input   we;
input   cyc;
input   stb;
input  [7:0] wb_in;
input   rx;
output   tx;
output   ack;
output  [7:0] uart_out;

reg ack;

reg   [1:0] state;
wire   [1:0] next_state_fu_175_p3;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] state_load_load_fu_117_p1;
wire   [0:0] rx_read_read_fu_62_p2;
wire   [0:0] icmp_ln1019_fu_139_p2;
wire   [0:0] and_ln47_1_fu_157_p2;
wire   [0:0] and_ln47_fu_151_p0;
wire   [0:0] and_ln47_fu_151_p1;
wire   [0:0] and_ln47_fu_151_p2;
wire   [0:0] and_ln47_1_fu_157_p1;
wire   [0:0] xor_ln52_fu_163_p0;
wire   [0:0] xor_ln52_fu_163_p2;
wire   [0:0] and_ln52_fu_169_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_condition_50;
reg    ap_condition_56;
reg    ap_condition_59;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 state = 2'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((1'b1 == ap_condition_59)) begin
            state <= 2'd1;
        end else if ((1'b1 == ap_condition_56)) begin
            state <= next_state_fu_175_p3;
        end else if ((1'b1 == ap_condition_50)) begin
            state <= 2'd0;
        end else if (((rx_read_read_fu_62_p2 == 1'd1) & (state_load_load_fu_117_p1 == 2'd2))) begin
            state <= 2'd2;
        end else if (((rx_read_read_fu_62_p2 == 1'd0) & (state_load_load_fu_117_p1 == 2'd2))) begin
            state <= 2'd0;
        end else if ((state_load_load_fu_117_p1 == 2'd1)) begin
            state <= 2'd0;
        end
    end
end

always @ (*) begin
    if ((~(state_load_load_fu_117_p1 == 2'd2) & ~(state_load_load_fu_117_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ack = 1'd0;
    end else if ((((rx_read_read_fu_62_p2 == 1'd0) & (state_load_load_fu_117_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1)) | ((state_load_load_fu_117_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ack = 1'd1;
    end else begin
        ack = 'bx;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln47_1_fu_157_p1 = we;

assign and_ln47_1_fu_157_p2 = (and_ln47_fu_151_p2 & and_ln47_1_fu_157_p1);

assign and_ln47_fu_151_p0 = stb;

assign and_ln47_fu_151_p1 = cyc;

assign and_ln47_fu_151_p2 = (and_ln47_fu_151_p1 & and_ln47_fu_151_p0);

assign and_ln52_fu_169_p2 = (xor_ln52_fu_163_p2 & and_ln47_fu_151_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_condition_50 = (~(state_load_load_fu_117_p1 == 2'd2) & ~(state_load_load_fu_117_p1 == 2'd1) & (icmp_ln1019_fu_139_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_56 = (~(state_load_load_fu_117_p1 == 2'd2) & ~(state_load_load_fu_117_p1 == 2'd1) & (icmp_ln1019_fu_139_p2 == 1'd1) & (1'd0 == and_ln47_1_fu_157_p2));
end

always @ (*) begin
    ap_condition_59 = (~(state_load_load_fu_117_p1 == 2'd2) & ~(state_load_load_fu_117_p1 == 2'd1) & (icmp_ln1019_fu_139_p2 == 1'd1) & (1'd1 == and_ln47_1_fu_157_p2));
end

assign icmp_ln1019_fu_139_p2 = ((adr == 8'd252) ? 1'b1 : 1'b0);

assign next_state_fu_175_p3 = ((and_ln52_fu_169_p2[0:0] == 1'b1) ? 2'd2 : 2'd0);

assign rx_read_read_fu_62_p2 = rx;

assign state_load_load_fu_117_p1 = state;

assign tx = 1'd1;

assign uart_out = 8'd0;

assign xor_ln52_fu_163_p0 = we;

assign xor_ln52_fu_163_p2 = (xor_ln52_fu_163_p0 ^ 1'd1);

endmodule //top
